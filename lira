#!/usr/bin/env python
import argparse
import os
from subprocess import call

lira_dir = os.environ['LIRA_DIR']

def parse_args():
	parser = {}
	parser['argparse'] = argparse.ArgumentParser(description='LiRA: Linked read analysis to identify somatic single nucleotide variants in MDA amplified single cells. For support, email craigbohrson@g.harvard.edu.')
	parser['subparse'] = parser['argparse'].add_subparsers()
	
	parser['setup'] = parser['subparse'].add_parser('setup',help='Setup a new analysis.')
	parser['setup'].add_argument('-c','--config',default=None,help='Path to a config file.',required=True)
	parser['setup'].set_defaults(func=setup)
	
	parser['split'] = parser['subparse'].add_parser('split',help='Split the genome into runnable chunks, by chromosome. Job scripts are made in ANALYSIS_PATH/job_scripts.')
	parser['split'].add_argument('-c','--config',default=None,help='Path to a config file.',required=True)
	parser['split'].add_argument('-m','--chr',default=None,help='Chromosome to analyze.')
	parser['split'].add_argument('-p','--parallel',default=False,action='store_true',dest='parallel',help='Analyze all chromosomes in parallel.')
	parser['split'].add_argument('-o','--overwrite',default=False,action='store_true',dest='overwrite',help='Overwrite completed chromosomal analyses.',required=False)
	parser['split'].set_defaults(func=split)
	
	parser['plink'] = parser['subparse'].add_parser('plink',help='Run scripts created by "split" in parallel.')
	parser['plink'].add_argument('-c','--config',default=None,help='Path to a config file.',required=True)
	parser['plink'].add_argument('-o','--overwrite',default=False,action='store_true',dest='overwrite',help='Overwrite existing results files.',required=False)
	parser['plink'].add_argument('-a','--batch_size',default=None,help='Job batch size (overrides value in global-config.txt).',required=False)
	parser['plink'].set_defaults(func=plink)
	
	parser['compare'] = parser['subparse'].add_parser('compare',help='Compare single-cell and bulk data.  If not using 10x data, the chosen single-cell and bulk analyses must have come from the same, multisample VCF file. Power job scripts are made in "ANALYSIS_PATH/job_scripts."')
	parser['compare'].add_argument('-s','--single_cell_config',default=None,help='Path to a single-cell or 10x config file.',required=True)
	parser['compare'].add_argument('-b','--bulk_config',default=None,help='Path to a bulk config file (unused for 10x).',required=False)
	parser['compare'].add_argument('-m','--chr',default=None,help='Chromosome to analyze.',required=False)
	parser['compare'].add_argument('-p','--parallel',default=False,action='store_true',dest='parallel',help='Run all chromosomes in parallel.',required=False)
	parser['compare'].add_argument('-o','--overwrite',default=False,action='store_true',dest='overwrite',help='Overwrite completed chromosomal analyses.  Warning: This will remove and recreate the "compare" subdirectory.',required=False)
	parser['compare'].add_argument('-w','--wait',default=False,action='store_true',dest='wait',help='Wait for completion of bulk jobs before executing (instead of throwing an error).  Useful for incorporating commands into an automated pipeline.')
	parser['compare'].set_defaults(func=compare)
	
	parser['ppower'] = parser['subparse'].add_parser('ppower',help='Run scripts created by "compare" in parallel.')
	parser['ppower'].add_argument('-s','--single_cell_config',default=None,help='Path to a single-cell or 10x config file.',required=True)
	parser['ppower'].add_argument('-b','--bulk_config',default=None,help='Path to a bulk config file (unused for 10x).',required=False)
	parser['ppower'].add_argument('-o','--overwrite',default=False,action='store_true',dest='overwrite',help='Overwrite existing results files.',required=False)
	parser['ppower'].add_argument('-a','--batch_size',default=None,help='Job batch size (overrides value in global-config.txt).',required=False)
	parser['ppower'].set_defaults(func=ppower)
	
	parser['varcall'] = parser['subparse'].add_parser('varcall',help='Call single-cell somatic single-nucleotide variants.')
	parser['varcall'].add_argument('-s','--single_cell_config',default=None,help='Path to a single-cell or 10x config file.',required=True)
	parser['varcall'].add_argument('-b','--bulk_config',default=None,help='Path to a bulk config file (unused for 10x).',required=False)
	parser['varcall'].add_argument('-o','--overwrite',default=False,action='store_true',dest='overwrite',help='Overwrite completed analysis.  Warning: This will remove and recreate the "varcall" subdirectory.',required=False)
	parser['varcall'].set_defaults(func=varcall)

	parser['joint'] = parser['subparse'].add_parser('joint',help='Analyze variants across a set of cells derived from this same VCF and compared against a common bulk sample.')
	parser['joint'].add_argument('-l','--config_list',default=None,help='Path to a file with single-cell config files, one per line.',required=True)
	parser['joint'].add_argument('-b','--bulk_config',default=None,help='Path to a bulk config file.',required=True)
	parser['joint'].add_argument('-d','--directory',default=None,help='Path to directory to store results.',required=True)
	parser['joint'].set_defaults(func=joint)
	return parser['argparse'].parse_args()

def run(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.single_cell_config),str(args.bulk_config)])

def setup(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.config),"setup"])

def split(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.config),"split",str(args.chr),str(args.parallel),str(args.overwrite)])

def plink(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.config),"plink",str(args.overwrite),str(args.batch_size)])

def compare(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.single_cell_config),"compare",str(args.bulk_config),str(args.chr),str(args.parallel),str(args.overwrite),str(args.wait)])

def ppower(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.single_cell_config),"ppower",str(args.bulk_config),str(args.overwrite),str(args.batch_size)])

def varcall(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.single_cell_config),"varcall",str(args.bulk_config),str(args.overwrite)])

def joint(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",str(args.config_list),"joint",str(args.bulk_config),str(args.directory)])

if __name__ == "__main__":
	args = parse_args()
	args.func(args)
