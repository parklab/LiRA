#!/usr/bin/env python
import argparse
import os
from subprocess import call

lira_dir = os.environ['LIRA_DIR']

def setup(args):
	return None

def parse_args():
	parser = {}
	parser['argparse'] = argparse.ArgumentParser(description='LiRA: Linked read analysis to identify somatic single nucleotide variants in MDA amplified single cells. For support, email craigbohrson@g.harvard.edu.')
	parser['subparse'] = parser['argparse'].add_subparsers()
	parser['setup'] = parser['subparse'].add_parser('setup',help='Setup a new analysis.')
	parser['setup'].add_argument('-c','--config',default=None,help='path to a config file')
	parser['setup'].set_defaults(func=setup)
	parser['split_genome'] = parser['subparse'].add_parser('split_genome',help='Split the genome into runnable chunks, by chromosome. Job scripts are made in "ANALYSIS_PATH/job_scripts"')
	parser['split_genome'].add_argument('-c','--config',default=None,help='path to a config file')
	parser['split_genome'].add_argument('-m','--chr',default=None,help='chromosome')
	parser['split_genome'].set_defaults(func=split_genome)
	parser['get_vcf_info'] = parser['subparse'].add_parser('get_vcf_info',help='Extract LiRA-relevant info from the original VCF file.')
	parser['get_vcf_info'].add_argument('-c','--config',default=None,help='path to a config file')
	parser['get_vcf_info'].add_argument('-m','--chr',default=None,help='chromosome')
	parser['get_vcf_info'].set_defaults(func=get_vcf_info)
	parser['get_alt_counts'] = parser['subparse'].add_parser('get_alt_counts',help='Get alternate allele counts over all sites in a bulk sample.  Only necessary to run for bulk samples.')
	parser['get_alt_counts'].add_argument('-c','--config',default=None,help='path to a config file')
	parser['get_alt_counts'].add_argument('-m','--chr',default=None,help='chromosome')
	parser['get_alt_counts'].set_defaults(func=get_alt_counts)
	parser['check_results'] = parser['subparse'].add_parser('check_results',help='Check results of job scripts made by "split_genome".  If not all jobs are complete, then this will print the jobs that are not done and exit.')
	parser['check_results'].add_argument('-c','--config',default=None,help='path to a config file')
	parser['check_results'].set_defaults(func=check_results)
	parser['collect_results'] = parser['subparse'].add_parser('collect_results',help='Collect the results of jobs scripts made by "split_genome" by chromosome.')
	parser['collect_results'].add_argument('-c','--config',default=None,help='path to a config file')
	parser['collect_results'].add_argument('-m','--chr',default=None,help='chromosome')
	parser['collect_results'].set_defaults(func=collect_results)
	parser['compare_to_bulk'] = parser['subparse'].add_parser('compare_to_bulk',help='Compare single-cell and bulk data.  Only run after "collect_results", "get_vcf_info", and "get_alt_counts" (bulk only) have been completed.  Note that the chosen single-cell and bulk analyses must have come from the same, multisample VCF file.')
	parser['compare_to_bulk'].add_argument('-s','--single_cell_config',default=None,help='path to a single-cell config file')
	parser['compare_to_bulk'].add_argument('-b','--bulk_config',default=None,help='path to a bulk config file')
	parser['compare_to_bulk'].add_argument('-m','--chr',default=None,help='chromosome')
	parser['compare_to_bulk'].set_defaults(func=compare_to_bulk)
	parser['collect_compare'] = parser['subparse'].add_parser('collect_compare',help='Collect results of "compare_to_bulk" across chromosomes. Also computes various counts of mutation types (phased/misphased germline/somatic mutations).')
	parser['collect_compare'].add_argument('-s','--single_cell_config',default=None,help='path to a single-cell config file')
	parser['collect_compare'].add_argument('-b','--bulk_config',default=None,help='path to a bulk config file')
	parser['collect_compare'].set_defaults(func=collect_compare)
	parser['power_jobs'] = parser['subparse'].add_parser('power_jobs',help='Create job scripts to calculate power over the genome for a single-cell to bulk comparison.')
	parser['power_jobs'].add_argument('-s','--single_cell_config',default=None,help='path to a single-cell config file')
	parser['power_jobs'].add_argument('-b','--bulk_config',default=None,help='path to a bulk config file')
	parser['power_jobs'].set_defaults(func=power_jobs)
	parser['check_power'] = parser['subparse'].add_parser('check_power',help='Check results of job scripts made by "power_jobs".  If not all jobs are complete, then this will print the jobs that are not done and exit.')
	parser['check_power'].add_argument('-s','--single_cell_config',default=None,help='path to a single-cell config file')
	parser['check_power'].add_argument('-b','--bulk_config',default=None,help='path to a bulk config file')
	parser['check_power'].set_defaults(func=check_power)
	return parser['argparse'].parse_args()

def setup(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.config,"setup"])

def split_genome(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.config,"split_genome",args.chr])

def get_vcf_info(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.config,"get_vcf_info",args.chr])

def get_alt_counts(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.config,"get_alt_counts",args.chr])

def check_results(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.config,"check_results"])

def collect_results(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.config,"collect_results",args.chr])

def compare_to_bulk(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.single_cell_config,"compare_to_bulk",args.bulk_config,args.chr])

def collect_compare(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.single_cell_config,"collect_compare",args.bulk_config])

def power_jobs(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.single_cell_config,"power_jobs",args.bulk_config])

def check_power(args):
	call(["Rscript","--vanilla",lira_dir + "/scripts/main.R",args.single_cell_config,"check_power",args.bulk_config])


if __name__ == "__main__":
	args = parse_args()
	args.func(args)
